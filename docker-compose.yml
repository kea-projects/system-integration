version: "3"
# # INFO
# All $VARIABLES are currently stored in a .env file on the same level as this
# document, please remember to populate it.
#
# You can test to see if the variables are loading correctly with the command:
# * `docker compose config`
# If the variables still have a $ on them then the .env is not being loaded.

# # USAGE
# The reccomended commands when working with docker compose is to use:
# * `docker compose up --build`
# This will force any container with changes to rebuild
#
# The reccomended way to take down the containers is with:
# * `docker compose down -v`
# This will ensure that the volume is deleted too.

# ---------------------------------
# ------------ GATEWAY ------------
services:
  gateway: # NGINX
    container_name: gateway
    restart: always
    build:
      context: .
      dockerfile: ./configs/gateway/gateway-dockerfile
    networks:
      - docker-net
    ports:
      - 80:80 # http
      - 3000:3000 # SFTP server
      # - 443:443

  sftp-server:
    container_name: sftp-server
    build:
      context: .
      dockerfile: ./configs/atmoz-sftp/atmoz-sftp-dockerfile
    environment:
      - SFTP_USERNAME=$SFTP_USERNAME
    networks:
      - docker-net
    #ports: # only open ports for direct container testing, let gateway reroute otherwise
    #  - 22:22
    volumes:
      - ftp-uploads:/home/$SFTP_USERNAME/upload
    command: "$SFTP_USERNAME:$SFTP_PASSWORD:1001"

  rabbitmq:
    container_name: rabbitmq
    restart: always
    build:
      context: .
      dockerfile: ./configs/rabbitmq/rabbitmq.dockerfile
    networks:
      - docker-net
    ports:
      # Exposing the port for the mock email and user services to be able 
      # connect to RabbitMQ until they are fully implemented
      - 5672:5672

  pictures-server:
    container_name: pictures-server
    restart: always
    build:
      context: .
      dockerfile: ./configs/profile-picture-path/profile-pics.dockerfile
    environment:
      - AZURE_CONNECTION_STRING=$AZURE_CONNECTION_STRING
      - AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_ACCOUNT_NAME
      - AZURE_CONTAINER_NAME=$AZURE_CONTAINER_NAME
    networks:
      - docker-net

  friend-path:
    container_name: friend-path
    restart: always
    depends_on:
      - rabbitmq
    build:
      context: .
      dockerfile: ./configs/friend-path/friend-path.dockerfile
    environment:
      - RABBITMQ_HOST=$RABBITMQ_HOST
      - RABBITMQ_VHOST=$RABBITMQ_VHOST
      - RABBITMQ_USER=$RABBITMQ_USER
      - RABBITMQ_PASSWORD=$RABBITMQ_PASSWORD
      - RABBITMQ_INVITE_EXCHANGE=$RABBITMQ_INVITE_EXCHANGE
      - RABBITMQ_USER_EXCHANGE=$RABBITMQ_USER_EXCHANGE
      - EMAIL_AZURE_FUNCTION_URL=$EMAIL_AZURE_FUNCTION_URL
    networks:
      - docker-net
    healthcheck:
      test: ["CMD", "curl", "http://localhost/friend/health"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 30s

  rss-path:
    container_name: rss-path
    restart: always
    build:
      context: .
      dockerfile: ./configs/rss-path/rss-path.dockerfile
    networks:
      - docker-net

  wishes-service:
    container_name: wishes-service
    restart: unless-stopped
    depends_on:
      - sys-postgres
    build:
      context: .
      dockerfile: ./configs/wishes-service/wishes-service.dockerfile
    environment:
      POSTGRES_HOST: ${WISHES_POSTGRES_HOST:-localhost}
      POSTGRES_PORT: ${WISHES_POSTGRES-PORT:-5432}
      POSTGRES_USER: ${WISHES_POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${WISHES_POSTGRES_PASSWORD:-root}
      POSTGRES_DATABASE: ${WISHES_POSTGRES_DATABASE:-integration}
    networks:
      - docker-net
  
  postgres:
    container_name: sys-postgres
    restart: unless-stopped
    image: postgres
    environment:
      POSTGRES_USER: ${WISHES_POSTGRES_USER:-root}
      POSTGRES_PASSWORD: ${WISHES_POSTGRES_PASSWORD:-root}
      POSTGRES_DB: ${WISHES_POSTGRES_DATABASE:-integration}
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    networks:
      - docker-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 10s  


# ---------------------------------
# ------------ NETWORK ------------
networks:
  docker-net:
    name: docker-net

# ---------------------------------
# ------------ VOLUMES ------------
volumes:
  ftp-uploads:
    name: ftp-uploads
  postgres:
